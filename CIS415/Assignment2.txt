Name: Ziyuan(John) Zhou

OSC 5.2:
Preemptive scheduling allows a process to be interrupted when it is executing, and reschedule it.
Nonpreemptive scheduling can not.

OSC 5.3:
a. 10.53
b. 9.53
c. 6.86

OSC 5.8:

OSC 6.4:
If two wait() execute on one semaphore and operations are not performed atomically, then both operations
might begin to decrement the semaphore value.

OSC 8.2:
Unsafe state is not equivalant to deadlock, it just means deadlock might occur and we can not guarantee.

OSC 8.7:
No, but we can prevent the starvation by including the number of rollbacks in the cost factor.

Q1:
a. CPU utilization will increase if overheads associate context switch is minimized, and minimization exsist becasue of 
infrequence. As a result, response time increase.
b. Waiting time = turnaround time - burst time. Minimizing average turnaround time is conflict to maximizing waiting time.
c. 

Q2:
Mutual exclusion is ensured through flag and turn. if both processes are true, one will be set to false and do nothing, other
one will execute. They will switch the ture after the non-wait one update the value of turn.
Progress: only flag[i] or flag[j] equal to true
Bounded waiting: the process will update the value of turn before it finish its turn. This step ensures that other process will 
enter its critical section next.

Q3:
Yes. Make sure all philosopher will not pick the chopsticks from their either left-hand sides or right-hand sides.

Q4:
a,d,e,f will be safe any time.
b,c will be safe if the recource which available more than which one process want.